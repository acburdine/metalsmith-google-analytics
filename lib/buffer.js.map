{"version":3,"sources":["buffer.js"],"names":[],"mappings":";;;;;;;;AAAO,IAAM,WAAW,WAAX,WAAW,GAAG,SAAd,WAAW,CAAI,MAAM,EAAE,KAAK,EAAK;AAC1C,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAA;AACpC,MAAM,GAAG,GAAK,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;AACjC,SAAO,CAAE,KAAK,EAAE,GAAG,CAAE,CAAA;CACxB,CAAA;;AAEM,IAAM,aAAa,WAAb,aAAa,GAAG,SAAhB,aAAa,GAAS;AACjC,SAAO,WAAU,MAAM,CAAC,UAAC,aAAa,EAAE,YAAY,EAAK;AACvD,WAAO,aAAa,GAAG,WAAU,YAAY,CAAC,CAAC,MAAM,CAAA;GACtD,EAAE,CAAC,CAAC,CAAA;CACN,CAAA;;AAEM,IAAM,qBAAqB,WAArB,qBAAqB,GAAG,SAAxB,qBAAqB,CAAI,MAAM,EAAE,GAAG,EAAK;AAClD,MAAI,SAAS,GAAG,EAAE,CAAA;AAClB,MAAI,KAAK,GAAI,CAAC,CAAA;AACd,MAAI,KAAK,GAAI,CAAC,CAAC,CAAA;;;;;;AACf,yBAAmB,MAAM,CAAC,OAAO,EAAE,8HAAE;;;UAA3B,CAAC;UAAE,CAAC;;AACZ,UAAG,CAAC,KAAK,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,EACpB,SAAS,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA,KACtB,IAAG,CAAC,CAAC,MAAM,EAAE;AAChB,iBAAS,IAAI,CAAC,CAAA;AACd,UAAE,KAAK,CAAA;OACR;AACD,UAAG,KAAK,IAAI,CAAC,EAAE;AACb,YAAG,SAAS,KAAK,GAAG,EAAE;AACpB,eAAK,GAAG,CAAC,GAAG,CAAC,CAAA;AACb,gBAAK;SACN;AACD,aAAK,GAAI,CAAC,CAAA;AACV,iBAAS,GAAG,EAAE,CAAA;OACf;KACF;;;;;;;;;;;;;;;;AACD,SAAO,KAAK,CAAA;CACf,CAAA;;AAEM,IAAM,aAAa,WAAb,aAAa,GAAG,SAAhB,aAAa;SAAS,MAAM,CAAC,MAAM,aAAY,aAAa,YAAW,CAAC;CAAA,CAAA","file":"buffer.js","sourcesContent":["export const splitBuffer = (buffer, index) => {\n    const start = buffer.slice(0, index)\n    const end   = buffer.slice(index)\n    return [ start, end ]\n}\n\nexport const buffersLength = () => {\n  return arguments.reduce((previousValue, currentValue) => {\n    return previousValue + arguments[currentValue].length\n  }, 0)\n}\n\nexport const bufferFindStringIndex = (buffer, str) => {\n    var strBuffer = ''\n    var count  = 0\n    var index  = -1\n    for (var [c, i] of buffer.entries()) {\n      if(c === str.charAt(0))\n        strBuffer = str.charAt(0)\n      else if(!!buffer) {\n        strBuffer += c\n        ++count\n      }\n      if(count == 6) {\n        if(strBuffer === str) {\n          index = i - 6\n          break\n        }\n        count  = 0\n        strBuffer = ''\n      }\n    }\n    return index\n}\n\nexport const concatBuffers = () => Buffer.concat(arguments, buffersLength(arguments))\n"],"sourceRoot":"/source/"}